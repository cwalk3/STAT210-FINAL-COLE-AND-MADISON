---
title: "sta210 project"
author: "Cole Walker, Madison Griffin"
format: pdf
editor: visual
---

## loading packages & dataset
```{r message = F}
library(tidyverse)
library(tidymodels)
library(readxl)
library(MASS)
library(leaps)
library(caret)
library(glmnet)
library(Stat2Data)
#library(statnnet)
library(lme4)
library(UpSetR)
library(nlme)
library(sjstats)
set.seed(8)
soccer <- read_excel("AllTimeRankingByClub.xlsx")
```

## Introduction and Data

#### Data Cleaning
```{r}
soccer = soccer %>%
  rename(goals_for = `Goals For`,
         goals_against = `Goals Against`,
         goal_diff = `Goal Diff`)

soccer = soccer %>%
  mutate(winpercentage = Win/Played,
         pointspermatch = Pts/Played,
         goalspermatch = goals_for/Played,
         goalsagainstpermatch = goals_against/Played,
         goalmarginpermatch = goal_diff/Played)

soccer = soccer %>%
  mutate(topfiveleague = ifelse(Country == 'ESP' | Country == 'ENG' | Country == 'GER' | Country == 'ITA' | Country == 'FRA', "top five", "not top five"))
```

#### EDA

Plot 1: 
```{r}
soccer %>%
  filter(Titles > 0) %>%
  ggplot(aes(x = reorder(Club, (-Titles)), y = Titles)) +
  geom_bar(stat = 'identity') +
  labs(x = 'Club', y = 'Number of Titles', title = 'Number of Titles for each Club',
       subtitle = 'Excluding Clubs That Have Never Won a Title') +
  theme_bw() +
  scale_x_discrete(guide = guide_axis(angle = 45))
```

Plot 2:
```{r}
soccer %>%
  filter(Titles > 0) %>%
  ggplot(aes(x = reorder(Country, (-Titles)), y = Titles)) +
  geom_bar(stat = 'identity') +
  labs(x = 'Country', y = 'Number of Titles', title = 'Number of Titles per Country',
       subtitle = 'Excluding Clubs That Have Never Won a Title') +
  theme_bw() +
  scale_x_discrete(guide = guide_axis(angle = 45))
```

Plot 3:
```{r warnings = F}
ggplot(data = soccer, aes(x = winpercentage, y = goalmarginpermatch)) +
  geom_point() +
  geom_smooth(method = 'lm', se = F, color = 'midnightblue') +
  labs(x = "Win Percentage", y = 'Goal Margin per Match', 
       title = 'Club Win Percentage in Tournament vs. Goal Margin Per Match') +
  theme_bw()
```

## Methods

we can only do linear or linear mixed effects...expand later

#### Variable Selection - LASSO

```{r}
y = soccer$pointspermatch
x = model.matrix(pointspermatch ~ winpercentage + goalspermatch + goalsagainstpermatch +
                 goalmarginpermatch + topfiveleague, data = soccer)
m_lasso_cv = cv.glmnet(x, y, alpha = 1)

best_lambda = m_lasso_cv$lambda.min
best_lambda

m_best = glmnet(x, y, alpha = 1, lambda = best_lambda)
m_best$beta

bestlasso = lm(pointspermatch ~ winpercentage + goalmarginpermatch + topfiveleague,
               data = soccer)
```

#### Variable Selection - Stepwise Selection

```{r}
m_none = lm(pointspermatch ~ 1, data = soccer)
m_all = lm(pointspermatch ~ winpercentage + goalspermatch + goalsagainstpermatch +
                 goalmarginpermatch + topfiveleague, data = soccer)
```

**Forward Selection**

```{r}
stepAIC(m_none,
        scope = list(lower = m_none, upper = m_all),
        data = soccer, direction = 'forward')
bestforward = lm(pointspermatch ~ winpercentage + goalmarginpermatch + 
    topfiveleague, data = soccer)
```

**Backward Selection**

```{r}
stepAIC(m_all,
        scope = list(lower = m_none, upper = m_all),
        data = soccer, direction = 'backward')
bestbackward = lm(pointspermatch ~ winpercentage + goalspermatch + goalsagainstpermatch +
                    topfiveleague, data = soccer)
```

**Both Selection**

```{r}
stepAIC(m_none,
        scope = list(lower = m_none, upper = m_all),
        data = soccer, direction = 'both')
bestboth = lm(pointspermatch ~ winpercentage + goalmarginpermatch + topfiveleague, data = soccer)
```

#### Variable Selection - All Subset

```{r}
soccer_allsub = regsubsets(pointspermatch ~ winpercentage + goalspermatch + 
                           goalsagainstpermatch + goalmarginpermatch + topfiveleague,
                           data = soccer,
                           nbest = 1, nvmax = 5)
soccer_allsub 
summary(soccer_allsub)$rsq
summary(soccer_allsub)$which
bestallsubset = lm(pointspermatch ~ winpercentage, data = soccer)
```


### Comparing RMSE after variable selection

RMSE All Subset: 0.1642128

**RMSE Best Backward: 0.1348656 - LOWEST**

RMSE Best Both, Forward, Lasso: 0.1348667

(they had the same predictors in it)

CONCLUSION:

- best backward has lowest rmse so better

- predictors: wins per match, top five league, goals per match, goals against per match

```{r}
rmse(bestallsubset)
rmse(bestbackward)
rmse(bestboth)
rmse(bestforward)
rmse(bestlasso)
```

#### Checking Assumptions
Model 1: Linear Regression

Outcome:

- points per match

Predictors:

- win percentage

- goal margin per match

- top five league

```{r}
linear = lm(pointspermatch ~ winpercentage + goalmarginpermatch + topfiveleague, 
            data = soccer)
summary(linear)
```

Conditions for Model 1:
Violated linearity, constant variance, and normality
```{r}
linearaug = augment(linear)

ggplot(linearaug, aes(x = .fitted, y = .resid)) +
  geom_point() +
  geom_hline(yintercept = 0, color = 'maroon') +
  labs(x = "Fitted (predicted) values", y = 'Residual') +
  ggtitle('Residual Plot Violates Linearity & Constant Variance Assumptions') +
  theme_bw()

ggplot(linearaug, aes(sample = .resid)) +
  stat_qq() +
  stat_qq_line() +
  theme_bw() +
  labs(x = 'Theoretical quantiles',
       y = 'Sample quantiles',
       title = 'QQ Plot Violates Normality Assumption')
```

Model 2: Linear Mixed Effects Model

Outcome:

- points per match

Predictors:

- win percentage

- goal margin per match

- random intercept for top five league


```{r}
linearmixed = lmer(pointspermatch ~ 1 + winpercentage + goalmarginpermatch +
              (1|topfiveleague), data = soccer)
summary(linearmixed)
```


```{r}
plot(linearmixed)
hist((resid(linearmixed) - mean(resid(linearmixed))) / sd(resid(linearmixed)), xlab = "Residual", main = "Histogram of Residuals Violates Normality", freq = FALSE); curve(dnorm, add = TRUE) 

```


Assumptions are worse for mixed effects...moving forward with linear regression


## Results

**FINAL MODEL:** 

$y_{ij}$ = ($\gamma_{00}$ + $\mu_{0j}$) + $\gamma_1 WinPercentage_{ij}$ + 
$\gamma_2 TopFiveLeague_{ij}$ + $\gamma_3 GoalsPerMatch_{ij}$ +
$\gamma_4 GoalsAgainstperMatch_{ij}$ + $\epsilon_{ij}$

where

$y_{ij}$ = points per match

$\gamma_1$: wins percentage

$\gamma_2$: top five league, 1 = top five

$\gamma_3$: goals per match

$\gamma_4$: goals against per match

```{r}
finalmodel = lmer(pointspermatch ~ 1 + winpercentage + goalspermatch + goalsagainstpermatch +
              (1|topfiveleague), data = soccer)
summary(finalmodel)
```


## Conclusion





















